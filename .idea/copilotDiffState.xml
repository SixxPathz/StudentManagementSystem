<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/Main/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/Main/Main.java" />
              <option name="originalContent" value="package com.Main;&#10;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        StudentManager manager = new StudentManager();&#10;        Scanner scanner = new Scanner(System.in);&#10;        boolean running = true;&#10;        while (running) {&#10;            System.out.println(&quot;--- Student Management System ---&quot;);&#10;            System.out.println(&quot;1. Add Student&quot;);&#10;            System.out.println(&quot;2. Edit Student&quot;);&#10;            System.out.println(&quot;3. Remove Student&quot;);&#10;            System.out.println(&quot;4. Display Students&quot;);&#10;            System.out.println(&quot;5. Exit&quot;);&#10;            System.out.print(&quot;Enter choice: &quot;);&#10;            String choice = scanner.nextLine();&#10;            switch (choice) {&#10;                case &quot;1&quot;:&#10;                    addStudent(manager, scanner);&#10;                    break;&#10;                case &quot;2&quot;:&#10;                    editStudent(manager, scanner);&#10;                    break;&#10;                case &quot;3&quot;:&#10;                    removeStudent(manager, scanner);&#10;                    break;&#10;                case &quot;4&quot;:&#10;                    manager.displayStudents();&#10;                    break;&#10;                case &quot;5&quot;:&#10;                    running = false;&#10;                    System.out.println(&quot;Exiting...&quot;);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid choice. Please try again.&quot;);&#10;            }&#10;        }&#10;        scanner.close();&#10;    }&#10;&#10;    private static void addStudent(StudentManager manager, Scanner scanner) {&#10;        try {&#10;            System.out.print(&quot;Enter name: &quot;);&#10;            String name = scanner.nextLine();&#10;            System.out.print(&quot;Enter ID: &quot;);&#10;            String id = scanner.nextLine();&#10;            System.out.print(&quot;Enter age: &quot;);&#10;            int age = Integer.parseInt(scanner.nextLine());&#10;            System.out.print(&quot;Enter grades (comma separated): &quot;);&#10;            String gradesInput = scanner.nextLine();&#10;            ArrayList&lt;Integer&gt; grades = new ArrayList&lt;&gt;();&#10;            for (String gradeStr : gradesInput.split(&quot;,&quot;)) {&#10;                int grade = Integer.parseInt(gradeStr.trim());&#10;                if (grade &lt; 0 || grade &gt; 100) {&#10;                    System.out.println(&quot;Grade must be between 0 and 100.&quot;);&#10;                    return;&#10;                }&#10;                grades.add(grade);&#10;            }&#10;            Student student = new Student(name, id, age, grades);&#10;            manager.addStudent(student);&#10;            System.out.println(&quot;Student added successfully!\n&quot;);&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid input. Please enter valid numbers for age and grades.\n&quot;);&#10;        }&#10;    }&#10;&#10;    private static void editStudent(StudentManager manager, Scanner scanner) {&#10;        System.out.print(&quot;Enter ID of student to edit: &quot;);&#10;        String id = scanner.nextLine();&#10;        Student student = manager.findStudentById(id);&#10;        if (student == null) {&#10;            System.out.println(&quot;Student not found.\n&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            System.out.print(&quot;Enter new name: &quot;);&#10;            String newName = scanner.nextLine();&#10;            System.out.print(&quot;Enter new age: &quot;);&#10;            int newAge = Integer.parseInt(scanner.nextLine());&#10;            System.out.print(&quot;Enter new grades (comma separated): &quot;);&#10;            String gradesInput = scanner.nextLine();&#10;            ArrayList&lt;Integer&gt; newGrades = new ArrayList&lt;&gt;();&#10;            for (String gradeStr : gradesInput.split(&quot;,&quot;)) {&#10;                int grade = Integer.parseInt(gradeStr.trim());&#10;                if (grade &lt; 0 || grade &gt; 100) {&#10;                    System.out.println(&quot;Grade must be between 0 and 100.&quot;);&#10;                    return;&#10;                }&#10;                newGrades.add(grade);&#10;            }&#10;            boolean success = manager.editStudent(id, newName, newAge, newGrades);&#10;            if (success) {&#10;                System.out.println(&quot;Student updated successfully!\n&quot;);&#10;            } else {&#10;                System.out.println(&quot;Failed to update student.\n&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid input. Please enter valid numbers for age and grades.\n&quot;);&#10;        }&#10;    }&#10;&#10;    private static void removeStudent(StudentManager manager, Scanner scanner) {&#10;        System.out.print(&quot;Enter ID of student to remove: &quot;);&#10;        String id = scanner.nextLine();&#10;        boolean success = manager.removeStudent(id);&#10;        if (success) {&#10;            System.out.println(&quot;Student removed successfully!\n&quot;);&#10;        } else {&#10;            System.out.println(&quot;Student not found.\n&quot;);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.Main;&#10;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // Create a StudentManager to handle student operations&#10;        StudentManager manager = new StudentManager();&#10;        // Scanner for reading user input from the terminal&#10;        Scanner scanner = new Scanner(System.in);&#10;        boolean running = true;&#10;        // Main loop for the menu system&#10;        while (running) {&#10;            // Display menu options&#10;            System.out.println(&quot;--- Student Management System ---&quot;);&#10;            System.out.println(&quot;1. Add Student&quot;);&#10;            System.out.println(&quot;2. Edit Student&quot;);&#10;            System.out.println(&quot;3. Remove Student&quot;);&#10;            System.out.println(&quot;4. Display Students&quot;);&#10;            System.out.println(&quot;5. Exit&quot;);&#10;            System.out.print(&quot;Enter choice: &quot;);&#10;            String choice = scanner.nextLine(); // Read user choice&#10;            switch (choice) {&#10;                case &quot;1&quot;:&#10;                    // Add a new student&#10;                    addStudent(manager, scanner);&#10;                    break;&#10;                case &quot;2&quot;:&#10;                    // Edit an existing student&#10;                    editStudent(manager, scanner);&#10;                    break;&#10;                case &quot;3&quot;:&#10;                    // Remove a student by ID&#10;                    removeStudent(manager, scanner);&#10;                    break;&#10;                case &quot;4&quot;:&#10;                    // Show all students&#10;                    manager.displayStudents();&#10;                    break;&#10;                case &quot;5&quot;:&#10;                    running = false;&#10;                    System.out.println(&quot;Exiting...&quot;);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid choice. Please try again.&quot;);&#10;            }&#10;        }&#10;        scanner.close();&#10;    }&#10;&#10;    private static void addStudent(StudentManager manager, Scanner scanner) {&#10;        try {&#10;            System.out.print(&quot;Enter name: &quot;);&#10;            String name = scanner.nextLine();&#10;            System.out.print(&quot;Enter ID: &quot;);&#10;            String id = scanner.nextLine();&#10;            System.out.print(&quot;Enter age: &quot;);&#10;            int age = Integer.parseInt(scanner.nextLine());&#10;            System.out.print(&quot;Enter grades (comma separated): &quot;);&#10;            String gradesInput = scanner.nextLine();&#10;            ArrayList&lt;Integer&gt; grades = new ArrayList&lt;&gt;();&#10;            for (String gradeStr : gradesInput.split(&quot;,&quot;)) {&#10;                int grade = Integer.parseInt(gradeStr.trim());&#10;                if (grade &lt; 0 || grade &gt; 100) {&#10;                    System.out.println(&quot;Grade must be between 0 and 100.&quot;);&#10;                    return;&#10;                }&#10;                grades.add(grade);&#10;            }&#10;            Student student = new Student(name, id, age, grades);&#10;            manager.addStudent(student);&#10;            System.out.println(&quot;Student added successfully!\n&quot;);&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid input. Please enter valid numbers for age and grades.\n&quot;);&#10;        }&#10;    }&#10;&#10;    private static void editStudent(StudentManager manager, Scanner scanner) {&#10;        System.out.print(&quot;Enter ID of student to edit: &quot;);&#10;        String id = scanner.nextLine();&#10;        Student student = manager.findStudentById(id);&#10;        if (student == null) {&#10;            System.out.println(&quot;Student not found.\n&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            System.out.print(&quot;Enter new name: &quot;);&#10;            String newName = scanner.nextLine();&#10;            System.out.print(&quot;Enter new age: &quot;);&#10;            int newAge = Integer.parseInt(scanner.nextLine());&#10;            System.out.print(&quot;Enter new grades (comma separated): &quot;);&#10;            String gradesInput = scanner.nextLine();&#10;            ArrayList&lt;Integer&gt; newGrades = new ArrayList&lt;&gt;();&#10;            for (String gradeStr : gradesInput.split(&quot;,&quot;)) {&#10;                int grade = Integer.parseInt(gradeStr.trim());&#10;                if (grade &lt; 0 || grade &gt; 100) {&#10;                    System.out.println(&quot;Grade must be between 0 and 100.&quot;);&#10;                    return;&#10;                }&#10;                newGrades.add(grade);&#10;            }&#10;            boolean success = manager.editStudent(id, newName, newAge, newGrades);&#10;            if (success) {&#10;                System.out.println(&quot;Student updated successfully!\n&quot;);&#10;            } else {&#10;                System.out.println(&quot;Failed to update student.\n&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid input. Please enter valid numbers for age and grades.\n&quot;);&#10;        }&#10;    }&#10;&#10;    private static void removeStudent(StudentManager manager, Scanner scanner) {&#10;        System.out.print(&quot;Enter ID of student to remove: &quot;);&#10;        String id = scanner.nextLine();&#10;        boolean success = manager.removeStudent(id);&#10;        if (success) {&#10;            System.out.println(&quot;Student removed successfully!\n&quot;);&#10;        } else {&#10;            System.out.println(&quot;Student not found.\n&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/Main/Student.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/Main/Student.java" />
              <option name="updatedContent" value="package com.Main;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class Student {&#10;    private String name;&#10;    private String id;&#10;    private int age;&#10;    private ArrayList&lt;Integer&gt; grades;&#10;&#10;    public Student(String name, String id, int age, ArrayList&lt;Integer&gt; grades) {&#10;        this.name = name;&#10;        this.id = id;&#10;        this.age = age;&#10;        this.grades = grades;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public int getAge() {&#10;        return age;&#10;    }&#10;&#10;    public void setAge(int age) {&#10;        this.age = age;&#10;    }&#10;&#10;    public ArrayList&lt;Integer&gt; getGrades() {&#10;        return grades;&#10;    }&#10;&#10;    public void setGrades(ArrayList&lt;Integer&gt; grades) {&#10;        this.grades = grades;&#10;    }&#10;&#10;    public double calculateAverage() {&#10;        if (grades == null || grades.isEmpty()) {&#10;            return 0.0;&#10;        }&#10;        int sum = 0;&#10;        for (int grade : grades) {&#10;            sum += grade;&#10;        }&#10;        return (double) sum / grades.size();&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ID: &quot; + id + &quot;, Name: &quot; + name + &quot;, Age: &quot; + age + &quot;, Grades: &quot; + grades + &quot;, Average: &quot; + String.format(&quot;%.2f&quot;, calculateAverage());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/Main/StudentManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/Main/StudentManager.java" />
              <option name="originalContent" value="package com.Main;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class StudentManager {&#10;    private ArrayList&lt;Student&gt; students;&#10;&#10;    public StudentManager() {&#10;        students = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public void addStudent(Student student) {&#10;        students.add(student);&#10;    }&#10;&#10;    public Student findStudentById(String id) {&#10;        for (Student student : students) {&#10;            if (student.getId().equalsIgnoreCase(id)) {&#10;                return student;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public boolean removeStudent(String id) {&#10;        Student student = findStudentById(id);&#10;        if (student != null) {&#10;            students.remove(student);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public boolean editStudent(String id, String newName, int newAge, ArrayList&lt;Integer&gt; newGrades) {&#10;        Student student = findStudentById(id);&#10;        if (student != null) {&#10;            student.setName(newName);&#10;            student.setAge(newAge);&#10;            student.setGrades(newGrades);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public void displayStudents() {&#10;        if (students.isEmpty()) {&#10;            System.out.println(&quot;No students found.&quot;);&#10;        } else {&#10;            for (Student student : students) {&#10;                System.out.println(student);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.Main;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class StudentManager {&#10;    private ArrayList&lt;Student&gt; students;&#10;&#10;    public StudentManager() {&#10;        students = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public void addStudent(Student student) {&#10;        students.add(student);&#10;    }&#10;&#10;    // Finds a student by their ID (case-insensitive)&#10;    public Student findStudentById(String id) {&#10;        for (Student student : students) {&#10;            // Compare IDs, ignoring case&#10;            if (student.getId().equalsIgnoreCase(id)) {&#10;                return student;&#10;            }&#10;        }&#10;        // Return null if not found&#10;        return null;&#10;    }&#10;&#10;    // Removes a student from the list using their ID&#10;    public boolean removeStudent(String id) {&#10;        Student student = findStudentById(id);&#10;        if (student != null) {&#10;            students.remove(student); // Remove the student object&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    // Edits the details of a student (name, age, grades)&#10;    public boolean editStudent(String id, String newName, int newAge, ArrayList&lt;Integer&gt; newGrades) {&#10;        Student student = findStudentById(id);&#10;        if (student != null) {&#10;            student.setName(newName); // Update name&#10;            student.setAge(newAge);   // Update age&#10;            student.setGrades(newGrades); // Update grades&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public void displayStudents() {&#10;        if (students.isEmpty()) {&#10;            System.out.println(&quot;No students found.&quot;);&#10;        } else {&#10;            for (Student student : students) {&#10;                System.out.println(student);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>